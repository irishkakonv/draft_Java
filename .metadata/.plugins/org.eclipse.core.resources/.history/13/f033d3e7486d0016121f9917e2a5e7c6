package adf;

import java.util.ArrayList;

@FunctionalInterface
interface IInspect<T> {
	public T inspect(Student_<T> student);
}

@FunctionalInterface
interface ISet<T> {
	public void set(Student_<T> student);
}

@FunctionalInterface
interface IModif<T> {
	public void modif();
}

class Student_<T> {
	T name;

	public Student_(T string) {
		name = string;
	}
}

class Element<T> {
	Student_<T> student;
	IInspect<T> inspect;
	ISet<T> setter;
	IModif<T> modifodif;

	public void inspectm() {
		System.out.println(inspect.inspect(student));
	}

	public void modifodifm() {
		modifodif.modif();
	}
}

public class MyContaner_<T> {
	private String string;

	ArrayList<Student_> arr = new ArrayList<>();

	IModif<T> modif = () -> {
		for (Student_ string : arr) {
			System.out.println(string.toString());
		}
	};

	public static <T> void main(String[] args) {

		Element<String> element = new Element();
		element.student = new Student_("PETER");

		// element.setter = (Student_<String> student) ->{};

		element.modifodif = () -> {
			String str = element.student.name;
			char[] arr = str.toCharArray();
			for (int i = 1; i < arr.length; i = i + 2) {
				char a;
				a = arr[i - 1];
				arr[i - 1] = arr[i];
				arr[i] = a;
			}
			str = String.valueOf(arr);
			element.student.name = str;
		};

		element.modifodifm();

		element.inspect = (Student_<String> st) -> {
			return st.name;
		};

		element.inspectm();

	}

}
